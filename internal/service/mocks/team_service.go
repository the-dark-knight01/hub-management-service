// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	entity "hub_management_service/internal/entity"

	mock "github.com/stretchr/testify/mock"
)

// TeamService is an autogenerated mock type for the TeamService type
type TeamService struct {
	mock.Mock
}

// CreateTeam provides a mock function with given fields: team
func (_m *TeamService) CreateTeam(team *entity.Team) error {
	ret := _m.Called(team)

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.Team) error); ok {
		r0 = rf(team)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: id
func (_m *TeamService) FindByID(id uint) (*entity.Team, error) {
	ret := _m.Called(id)

	var r0 *entity.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (*entity.Team, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) *entity.Team); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTeamsByHubID provides a mock function with given fields: hubID
func (_m *TeamService) FindTeamsByHubID(hubID uint) ([]entity.Team, error) {
	ret := _m.Called(hubID)

	var r0 []entity.Team
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]entity.Team, error)); ok {
		return rf(hubID)
	}
	if rf, ok := ret.Get(0).(func(uint) []entity.Team); ok {
		r0 = rf(hubID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Team)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(hubID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTeamService creates a new instance of TeamService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTeamService(t interface {
	mock.TestingT
	Cleanup(func())
}) *TeamService {
	mock := &TeamService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
